import { fetch, Request }  from "cross-fetch";

import ClientConfig, { ClientConfigInit } from "./clientConfig";
import type {
  BaseUriParameters,
  CompositeParameters,
  RequireParametersUnlessAllAreOptional
} from "./helpers";
import TemplateURL from "./templateUrl";
import { USER_AGENT_HEADER, USER_AGENT_VALUE } from "./version";

/**
 * All path parameters that are used by at least one {{{name.upperCamelCase}}} method.
 */
export type {{name.upperCamelCase}}PathParameters = {
{{#each (getPathParameterTypeMapFromEndpoints model.encodes.endPoints)}}
  {{{@key}}}?: {{{this}}};
{{/each}}
}
/**
 * All query parameters that are used by at least one {{{name.upperCamelCase}}} method.
 */
export type {{name.upperCamelCase}}QueryParameters = {
{{#each (getQueryParameterTypeMapFromEndpoints model.encodes.endPoints)}}
  {{{@key}}}?: {{{this}}};
{{/each}}
}

/**
 * All parameters that are used by {{{name.upperCamelCase}}}.
 */
export type {{name.upperCamelCase}}Parameters = {{name.upperCamelCase}}PathParameters & BaseUriParameters & {{name.upperCamelCase}}QueryParameters;

/**
* [{{{metadata.name}}}](https://developer.commercecloud.com/s/api-details/{{{getObjectIdByAssetId metadata.assetId}}})
* ==================================
*
* *{{metadata.description}}*<br />
*
* Simple example:
*
* ```typescript
*   import { {{name.upperCamelCase}} } from "commerce-sdk-isomorphic";
*
*   const clientConfig = {
*     parameters: {
*       clientId: "XXXXXX",
*       organizationId: "XXXX",
*       shortCode: "XXX",
*       siteId: "XX"
*     }
*   };
*   const {{name.lowerCamelCase}}Client = new {{name.upperCamelCase}}(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: {{metadata.version}}<br />
* Last Updated: {{metadata.updatedDate}}<br />  
* </span>
{{#if (eq (lowercase metadata.categories.[CC Version Status].[0]) "beta")}}
* @beta 
* {{/if}}
* 

*/
export class {{name.upperCamelCase}}<ConfigParameters extends {{{name.upperCamelCase}}}Parameters & Record<string, unknown>> {
  // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
  public clientConfig: ClientConfig<ConfigParameters> & { baseUri: string };

  static readonly defaultBaseUri = "{{getBaseUriFromDocument model}}";

  constructor(config: ClientConfigInit<ConfigParameters>) {
    const cfg = {...config}
    if (!cfg.baseUri) cfg.baseUri = new.target.defaultBaseUri;
    // Type assertion is safe because ^^^
    this.clientConfig = new ClientConfig(cfg) as ClientConfig<ConfigParameters> & { baseUri: string };
  }

  {{> operationsPartial model}}

}
